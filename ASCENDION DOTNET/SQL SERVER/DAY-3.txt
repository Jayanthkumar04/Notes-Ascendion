=====================
STORED PROCEDURES
=====================
1)BUILT-IN STO. PRO.. 2)USER-DEFINED ST..PRO..

=>GROUP OF TRANSACT-SQL STATEMENTS THAT ACT AS SINGLE BLOCK OF CODE THAT PERFORMS A SPECIFIC TASK

=>IT PROVIDES SECURITY OUTSIDERS CANT INJECT ANY QUERY

=======
SYNTAX
=======
=====================
1)CREATING PROCEDURE
=====================
create procedure <proc-name>

parameters

as

begin

sql statements

end
==============================
CREATE PROCEDURE usp_AllPlayers
AS
BEGIN
SELECT PID 'Player Id', PName 'Player Name',PAvg 'Player avg', PTeam 'Player Team' FROM Player;
END
==============================

=======================
2)Executing Procedures
=======================
exec <proc-name>

EXEC usp_AllPlayers;

INSERT INTO Player values (4,'ABD',76.56,'south africa');

EXEC usp_AllPlayers;

====================
WITH PARAMETERS
====================
CREATE PROC usp_ParticularPlayer 
@Id int
as 
BEGIN
select *from Player where PId = @Id
end;

=====================
EXECUTE usp_ParticularPlayer 2;

EXECUTE usp_ParticularPlayer @Id=2;
==========================


=============
ALTERING 
=============

alter PROC usp_ParticularPlayer 
@Id int = 1
as 
BEGIN
select *from Player where PId = @Id
end;
===============================================
built-in Procedures(system stored procedures)
===============================================
@@RowCount

exec sp_tables;  //shows all tables
 
exec sp_helptext usp_AllPlayers; // shows the stored procedure statements

===========================
encrypting stored procedure                     
===========================
ALTER PROC usp_dPlayer
@Id int
WITH ENCRYPTION            ***************
as
begin
	delete from Player where PId = @Id
	if(@@ROWCOUNT <> 0)
		begin
	print 'recorded deleted!!'
		end
end	

EXEC sp_helptext usp_dPlayer;	

====================================

================
output parameters
==================

CREATE PROC usp_salaryByDept
@did int,
@total float output
as
begin
select @total = sum(Salary) from Emps group by Department having Department=@did
end

==============
using print
==============
declare @SumSalary float
execute usp_salaryByDept 2 , @SumSalary output
print 'Sum of salaries: '+convert(nvarchar(30),@SumSalary)
===========================
===========================

==============
nested proc
==============
ALTER PROC usp_nestPro
@did int
as
begin
declare @sum float
execute usp_salaryByDept @did,@sum out
if(@sum <>0)
begin
print 'Sum of salaries of department: '+convert(nvarchar(50),@did)+'is =' +convert(nvarchar(50),@sum)
end
else
begin
print 'No data available'
end
end

=======================
USER DEFINED FUNCTIONS
=======================
-------------------
1)CREATE FUNCTION
-------------------
CREATE FUNCTION fnFullName(@fn nvarchar(50), @ln nvarchar(50))
returns nvarchar(101)
begin
return @fn+''+@ln
end
-------------------
2)EXECUTE FUNCTION
-------------------
select dbo.fnFullName('Ravi','kumar') 'FULL NAME';

========
EX-2
=======
CREATE TABLE bank.Customers
(
id int primary key identity(1000,1),
fname nvarchar(50),
lname nvarchar(50),
contact nvarchar(50)
);
INSERT INTO bank.Customers (fname, lname, contact)
VALUES
    ('John', 'Doe', '555-1234'),
    ('Jane', 'Smith', '555-5678'),
    ('Michael', 'Johnson', '555-8765'),
    ('Emily', 'Davis', '555-4321'),
    ('David', 'Martinez', '555-7890');
	select *from bank.Customers;
	go
CREATE FUNCTION bank.fnGnPwd 
(@fn nvarchar(50),@id int,@ln nvarchar(50),@contact nvarchar(50))
returns nvarchar(50)
as
BEGIN
return right(@fn,2)+''+CONVERT(nvarchar(10),@id)+''+left(@ln,2)+''+@contact;
end

select fname,lname,contact,bank.fnGnPwd(fname,id,lname,contact) AS 'GENERATED PWD' from bank.Customers;
========================
=========================


3)

create function lg.fnTax
(@price float)
returns float 
as 
begin
declare @tax float;
if(@price >= 25000)
begin
select @tax = @price*0.18
end
else
begin
select @tax=@price*0.10
end
return @tax;
end

select PPPrice,lg.fnTax(PPrice) from lg.products;

=========================
SYSTEM STORED PROCEDURES
=========================
EXEC sp_pkeys 'Emps';

https://learn.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/system-stored-procedures-transact-sql?view=sql-server-ver16


=============================



===========
TRIGGERS
===========

--TRIGGERS

--1)DML
--A:after or For:after insert , after update, after delete
--b:instead of insert , instead of delete ,instead of update
--I) inserted:insert,update
--II)deleted:delete

------------------------------------

--syntax
--CREATE TRIGGER [SCHEMANAME.] trigger_name
--ON [schemaname.] table_name
--[WITH ENCRYPTION]
--{fOR|after|instead of action(eg.Insert,update,delete)}
--AS
--[IF UPDATE (col name...)]
--as
--<sql statements>

=====================================
ex
=====================================
CREATE TABLE Customer2
(
Id int primary key,
Fname nvarchar(50) not null,
Lname nvarchar(50) not null,
SPLan float not null,
SDate date not null,
SEDate date not null
);



CREATE TABLE Customer2_Log
(
LogId int primary key identity,
Id int,
Fname nvarchar(50),
Lname nvarchar(50),
SPlan float,
SDate date,
SEDate date,
ActionTaken nvarchar(100),
ActionTime datetime default getdate()
);

select *from customer2;

select *from Customer2_Log;

CREATE TRIGGER trgAfterCustInsert
on
Customer2
after insert
as
declare @id int
declare @fn nvarchar(50)
declare @ln nvarchar(50)
declare @plan float
declare @sdate date
declare @edate date
select @id=Id,@fn=Fname,@ln=Lname,@plan=SPlan,@sdate=SDATE,@edate=SEDate from inserted
insert into Customer2_Log(Id,Fname,Lname,SPlan,SDate,SEDate,ActionTaken)
VALUES(@id,@fn,@ln,@plan,@sdate,@edate,'RECORD INSERTED')
PRINT 'RECORD INSERTED AND ACTION CAPTURED IN CUSTOMER-LOG'



insert into Customer2(Id,Fname,Lname,SPlan,SDate,SEDate) VALUES (1,'jayanth','yadavalli',20000,'08/04/2001','02/12/2025');

============
UPDATE
===========
CREATE TRIGGER trgAfterCustUpdate 
ON Customer2
AFTER UPDATE
AS
DECLARE 
    @id INT, 
    @fn NVARCHAR(50), 
    @ln NVARCHAR(50), 
    @plan FLOAT, 
    @sdate DATE, 
    @edate DATE,
    @action NVARCHAR(10)
    
-- Capture the updated values from the inserted and deleted pseudo-tables
SELECT 
    @id = inserted.Id,
    @fn = inserted.Fname,
    @ln = inserted.Lname,
    @plan = inserted.SPlan,
    @sdate = inserted.SDate,
    @edate = inserted.SEDate
FROM inserted

-- Capture the deleted (previous) values from the deleted pseudo-table (before update)
SELECT 
    @action = 'RECORD UPDATED'
FROM deleted

-- Insert the changes into the log table
INSERT INTO Customer2_Log (Id, Fname, Lname, SPlan, SDate, SEDate, ActionTaken)
VALUES (@id, @fn, @ln, @plan, @sdate, @edate, @action)

PRINT 'RECORD UPDATED AND ACTION CAPTURED IN CUSTOMER-LOG'

=========
DELETE
========
CREATE TRIGGER trgAfterCustDelete
ON Customer2
AFTER DELETE
AS
DECLARE 
    @id INT, 
    @fn NVARCHAR(50), 
    @ln NVARCHAR(50), 
    @plan FLOAT, 
    @sdate DATE, 
    @edate DATE,
    @action NVARCHAR(10)

-- Capture the deleted values from the deleted pseudo-table
SELECT 
    @id = deleted.Id,
    @fn = deleted.Fname,
    @ln = deleted.Lname,
    @plan = deleted.SPlan,
    @sdate = deleted.SDate,
    @edate = deleted.SEDate
FROM deleted

-- Log the deletion into the log table
SET @action = 'RECORD DELETED'

INSERT INTO Customer2_Log (Id, Fname, Lname, SPlan, SDate, SEDate, ActionTaken)
VALUES (@id, @fn, @ln, @plan, @sdate, @edate, @action)

PRINT 'RECORD DELETED AND ACTION CAPTURED IN CUSTOMER-LOG'


=================================
IF WE WANT BEFORE RECORED USE ,,
 BEFORE UPDATE
 BEFORE DELETE
=================================

===================
INSTEAD OF TRIGGER
===================
==============
raise error()
==============

=========================================
on delete cascade and on update cascade
=========================================
CREATE TABLE Student
(
Sid int PRIMARY KEY,
SName nvarchar(20),
SEmail nvarchar(20),
SContact nvarchar(20)
);

CREATE TABLE Fee
(
Sid int,
SFee int,
SMonth int,
SYear int,
constraint Fee_PK primary key(Sid,SMonth,SYear),
FOREIGN KEY(Sid) references Student(Sid) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE PayConfirmation
(
Sid int,
SName nvarchar(30),
SEmail nvarchar(30),
SFee int,
PaidOnDate date
);

ALTER TRIGGER trgFeePayConfirmation
ON Fee
AFTER INSERT
AS 

DECLARE @Sid int,
        @Name nvarchar(20),
		@Email nvarchar(20),
		@Fee int,
		@PaidOnDate date

select @Sid=inserted.Sid,@Fee=inserted.SFee, @PaidOnDate=GETDATE() from inserted;
select @Name=SName ,@Email=SEmail from student where Sid=@Sid;
insert into PayConfirmation values (@Sid,@Name,@Email,@Fee,@PaidOnDate)

print 'RECORD HAS BEEN INSERTED SUCCESSFULLY'

=======================
=======================


DML TRIGGERS CAN BE SEEN IN THE DATABASE

DDL TRIGGERS CAN BE SEEN IN THE PROGRAMABILITY

--DDL trigger
--create trigger <trigger_name> ON {all server|database}
--[with encryption]
--{for|after}
--{<event-type>}
--AS <sql_statement>

CREATE TRIGGER trgStopDrop
on DATABASE
AFTER Drop_Table
AS
PRINT 'you can not drop the table'
PRINT 'To drop delete or disable trgstopdrop'
rollback
--------------------------

CREATE TRIGGER trgStopDropCreateEvent
on DATABASE
AFTER Drop_Table,Create_Table,Alter_Table
AS
PRINT 'you can not drop the table'
PRINT 'To drop delete or disable trgstopdrop'
rollback;

drop table Emps;


====================
VIEWS
===================
1)a virtual table made from read table


create view stu_view 
as
select *from student;
----------------------------------

delete from stu_view where id=2;

now if in view the record deleted then it will be deleted in real table also

------------------------------------


alter table student drop column Lname;

after dropping if you want to see view it gives error
---------------------------------------

===============
SCHEMA BINDING
===============





