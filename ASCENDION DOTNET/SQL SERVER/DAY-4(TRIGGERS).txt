
===========
TRIGGERS
===========

--TRIGGERS

--1)DML
--A:after or For:after insert , after update, after delete
--b:instead of insert , instead of delete ,instead of update
--I) inserted:insert,update
--II)deleted:delete

------------------------------------

--syntax
--CREATE TRIGGER [SCHEMANAME.] trigger_name
--ON [schemaname.] table_name
--[WITH ENCRYPTION]
--{fOR|after|instead of action(eg.Insert,update,delete)}
--AS
--[IF UPDATE (col name...)]
--as
--<sql statements>

=====================================
ex
=====================================
CREATE TABLE Customer2
(
Id int primary key,
Fname nvarchar(50) not null,
Lname nvarchar(50) not null,
SPLan float not null,
SDate date not null,
SEDate date not null
);



CREATE TABLE Customer2_Log
(
LogId int primary key identity,
Id int,
Fname nvarchar(50),
Lname nvarchar(50),
SPlan float,
SDate date,
SEDate date,
ActionTaken nvarchar(100),
ActionTime datetime default getdate()
);

select *from customer2;

select *from Customer2_Log;

CREATE TRIGGER trgAfterCustInsert
on
Customer2
after insert
as
declare @id int
declare @fn nvarchar(50)
declare @ln nvarchar(50)
declare @plan float
declare @sdate date
declare @edate date
select @id=Id,@fn=Fname,@ln=Lname,@plan=SPlan,@sdate=SDATE,@edate=SEDate from inserted
insert into Customer2_Log(Id,Fname,Lname,SPlan,SDate,SEDate,ActionTaken)
VALUES(@id,@fn,@ln,@plan,@sdate,@edate,'RECORD INSERTED')
PRINT 'RECORD INSERTED AND ACTION CAPTURED IN CUSTOMER-LOG'



insert into Customer2(Id,Fname,Lname,SPlan,SDate,SEDate) VALUES (1,'jayanth','yadavalli',20000,'08/04/2001','02/12/2025');

============
UPDATE
===========
CREATE TRIGGER trgAfterCustUpdate 
ON Customer2 
AFTER UPDATE 
AS
DECLARE 
    @id INT, 
    @fn NVARCHAR(50), 
    @ln NVARCHAR(50), 
    @plan FLOAT, 
    @sdate DATE, 
    @edate DATE,
    @action NVARCHAR(10)
    
-- Capture the updated values from the inserted and deleted pseudo-tables
SELECT 
    @id = inserted.Id,
    @fn = inserted.Fname,
    @ln = inserted.Lname,
    @plan = inserted.SPlan,
    @sdate = inserted.SDate,
    @edate = inserted.SEDate
FROM inserted

-- Capture the deleted (previous) values from the deleted pseudo-table (before update)
SELECT 
    @action = 'RECORD UPDATED'
FROM deleted

-- Insert the changes into the log table
INSERT INTO Customer2_Log (Id, Fname, Lname, SPlan, SDate, SEDate, ActionTaken)
VALUES (@id, @fn, @ln, @plan, @sdate, @edate, @action)

PRINT 'RECORD UPDATED AND ACTION CAPTURED IN CUSTOMER-LOG'

=========
DELETE
========
CREATE TRIGGER trgAfterCustDelete
ON Customer2
AFTER DELETE
AS
DECLARE 
    @id INT, 
    @fn NVARCHAR(50), 
    @ln NVARCHAR(50), 
    @plan FLOAT, 
    @sdate DATE, 
    @edate DATE,
    @action NVARCHAR(10)

-- Capture the deleted values from the deleted pseudo-table
SELECT 
    @id = deleted.Id,
    @fn = deleted.Fname,
    @ln = deleted.Lname,
    @plan = deleted.SPlan,
    @sdate = deleted.SDate,
    @edate = deleted.SEDate
FROM deleted

-- Log the deletion into the log table
SET @action = 'RECORD DELETED'

INSERT INTO Customer2_Log (Id, Fname, Lname, SPlan, SDate, SEDate, ActionTaken)
VALUES (@id, @fn, @ln, @plan, @sdate, @edate, @action)

PRINT 'RECORD DELETED AND ACTION CAPTURED IN CUSTOMER-LOG'


=================================
IF WE WANT BEFORE RECORED USE ,,
 BEFORE UPDATE
 BEFORE DELETE
=================================

===================
INSTEAD OF TRIGGER
===================
==============
raise error()
==============

=========================================
on delete cascade and on update cascade
=========================================
CREATE TABLE Student
(
Sid int PRIMARY KEY,
SName nvarchar(20),
SEmail nvarchar(20),
SContact nvarchar(20)
);

CREATE TABLE Fee
(
Sid int,
SFee int,
SMonth int,
SYear int,
constraint Fee_PK primary key(Sid,SMonth,SYear),
FOREIGN KEY(Sid) references Student(Sid) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE PayConfirmation
(
Sid int,
SName nvarchar(30),
SEmail nvarchar(30),
SFee int,
PaidOnDate date
);


ALTER TRIGGER trgFeePayConfirmation
ON Fee
AFTER INSERT
AS 

DECLARE @Sid int,
        @Name nvarchar(20),
		@Email nvarchar(20),
		@Fee int,
		@PaidOnDate date

select @Sid=inserted.Sid,@Fee=inserted.SFee, @PaidOnDate=GETDATE() from inserted;
select @Name=SName ,@Email=SEmail from student where Sid=@Sid;
insert into PayConfirmation values (@Sid,@Name,@Email,@Fee,@PaidOnDate)

print 'RECORD HAS BEEN INSERTED SUCCESSFULLY'

=======================
=======================


DML TRIGGERS CAN BE SEEN IN THE DATABASE

DDL TRIGGERS CAN BE SEEN IN THE PROGRAMABILITY

--DDL trigger
--create trigger <trigger_name> ON {all server|database}
--[with encryption]
--{for|after}
--{<event-type>}
--AS <sql_statement>

CREATE TRIGGER trgStopDrop
on DATABASE
AFTER Drop_Table
AS
PRINT 'you can not drop the table'
PRINT 'To drop delete or disable trgstopdrop'
rollback
--------------------------

CREATE TRIGGER trgStopDropCreateEvent
on DATABASE
AFTER Drop_Table,Create_Table,Alter_Table
AS
PRINT 'you can not drop the table'
PRINT 'To drop delete or disable trgstopdrop'
rollback; 

drop table Emps;

====================
VIEWS
===================
1)a virtual table made from read table


create view stu_view 
as
select *from student;
----------------------------------

delete from stu_view where id=2;

now if in view the record deleted then it will be deleted in real table also

------------------------------------

use DAY3DB;

CREATE TABLE Student
(
id int primary key,
Fname nvarchar(20),
Lname nvarchar(20),
);

insert into Student values(1,'sam','dicosta');
insert into student values(2,'ram','docota');
insert into student values(3,'ganesh','kumar');
create view stu_view 
as
select *from student;


select *From stu_view;
select *from student;

delete from stu_view where id=2;

alter table student drop column Lname;


USE DAY2DB;

create view view_EmpDepts 
AS
select e.Id 'Employee Id',e.Fname+''+e.Lname 'Employee Name',e.Designation 'Employee Designation',d.DId 'Dept Id',
d.DName 'Dept Name'
from Emps e inner join Dept d on e.Department=d.DId;

---------------------------------------------
select *from view_EmpDepts;
select *from emps;
------------------------------------------------
SELECT *FROM view_EmpDepts where [Dept Id] = 2;

------------------------------------------------------
SELECT *FROM view_EmpDepts WHERE [Dept Name] = 'it';

---------------------------------------------------------------
insert into Emps values (19,'kashif','farhan',75000,'admin',4);

----------------------------------------------------------------
-----------------------------------------------------------------


alter table student drop column Lname;

after dropping if you want to see view it gives error SO WE DO SCEMA BINDING THE ROWS IN VIEWS WONT BE DELETED
---------------------------------------

SELECT TOP (1000) [Id]
      ,[Fname]
      ,[Lname]
      ,[ODLimit]
  FROM [DAY2DB].[dbo].[Customer]

CREATE TABLE Customer3
(
CId nvarchar(5) primary key,
Cname nvarchar(50) not null,
Email nvarchar(50) not null unique,
Contact nvarchar(50) not null unique check (Contact like'[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]')
);

insert into Customer3 values ('c1','rohith','rohit598@gmail.com','434324444');

select *from Customer3;

create view cust_view
as
select cid 'custId',cname 'custName',email 'custEmail' 
from Customer3;

select *from Customer3;

alter table Customer3 drop column Email;

alter table Customer3 drop constraint UQ__Customer__A9D1053429AB8719;

alter table Customer3 drop column Email;

select *from Customer3;

select *from cust_view;

--------------------------------------
---------------------------------------
--schema binding

CREATE SCHEMA bank2;


CREATE TABLE bank2.Customer3
(
CId nvarchar(5) primary key,
Cname nvarchar(50) not null,
Email nvarchar(50) not null unique,
Contact nvarchar(50) not null unique check (Contact like'[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]')
);

insert into bank2.Customer3 values ('c1','rohith','rohit598@gmail.com','434324444');

select *from bank2.Customer3;

create view bank2.cust_view
as
select cid 'custId',cname 'custName',email 'custEmail' 
from bank2.Customer3;

select *from bank2.Customer3;

alter table bank2.Customer3 drop column Email;

alter table Customer3 drop constraint UQ__Customer__A9D1053429AB8719;

alter table Customer3 drop column Email;

select *from Customer3;

select *from bank2.cust_view;

